#!/usr/bin/env bash
# Generic Environment-Specific Infrastructure Configuration
# Inherits from parent .envrc and provides environment-specific configurations

# Source parent .envrc for inheritance
source_up || true

# Environment-specific logging function
_env_log() {
  local log_level="${1:-INFO}"
  local message="$2"
  _log "$log_level" "[ENV:${ENVIRONMENT:-GLOBAL}] $message"
}

# Enhanced .env file loading with comprehensive logging
_load_env_dotenv() {
  local current_dir="${1:-.}"
  local env_file="${current_dir}/.env"

  # Search for .env file in current directory and parent directories
  while [ "$current_dir" != "/" ]; do
    if [[ -f "${current_dir}/.env" ]]; then
      _env_log "INFO" "Found .env file at ${current_dir}/.env"

      # Use set -a to export all variables from .env
      set -a
      # shellcheck disable=SC1090
      source "${current_dir}/.env"
      set +a

      _env_log "INFO" "Loaded environment variables from ${current_dir}/.env"
      return 0
    fi

    current_dir=$(dirname "$current_dir")
  done

  _env_log "WARN" "No .env file found in current or parent directories"
  return 1
}

# Environment-specific variable export
_env_export() {
  # Use the existing _safe_export from parent, with environment-specific logging
  _safe_export "$1" "$2" "$(caller | awk '{print $2}')"
  _env_log "TRACK" "Environment config: $1 = [REDACTED]"
}

# Environment configuration detection
_detect_env_root() {
  local current_dir="$PWD"
  local env_markers=(
    "terragrunt.hcl"
    "env.hcl"
    "config.hcl"
  )

  while [ "$current_dir" != "/" ]; do
    for marker in "${env_markers[@]}"; do
      if [ -e "$current_dir/$marker" ]; then
        _env_export ENV_ROOT "$current_dir"
        _env_log "INFO" "Environment root detected: $current_dir"
        return 0
      fi
    done
    current_dir=$(dirname "$current_dir")
  done

  _env_export ENV_ROOT "$PWD"
  _env_log "WARN" "No specific environment root marker found. Using current directory."
}

# Main environment initialization
_env_init() {
  # Detect environment root
  _detect_env_root

  # Load .env file from current or parent directories
  _load_env_dotenv

  # üîê ENVIRONMENT-SPECIFIC VARIABLE DEFINITION SECTION üîê
  # Use _env_export to add environment-wide variables
  # Uncomment and modify as needed, following these guidelines:
  # 1. Use uppercase names
  # 2. Provide meaningful values
  # 3. Add comments explaining the variable's purpose

  # Default Environment Configuration
  _env_export ENVIRONMENT "${ENVIRONMENT:-global}"

  # Example variables (uncomment and customize):
  # _env_export ENV_DEBUG "true"
  # _env_export MAX_PARALLEL_JOBS "5"
  # _env_export CUSTOM_ENV_OPTION "some_value"

  # Validation of critical environment configurations
  _validate_env_config
}

# Validate Environment Configuration
_validate_env_config() {
  local required_vars=(
    "ENVIRONMENT"
  )
  local missing_vars=()

  for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
      missing_vars+=("$var")
    fi
  done

  if [[ ${#missing_vars[@]} -gt 0 ]]; then
    _env_log "ERROR" "Missing critical environment configurations:"
    printf '%s\n' "${missing_vars[@]}"
    return 1
  fi

  _env_log "INFO" "Environment configuration validated successfully"
}

# Environment Information Display
_env_info() {
  _env_log "INFO" "üåç Infrastructure Environment Details"
  _env_log "INFO" "Environment Root: ${ENV_ROOT}"
  _env_log "INFO" "Environment: ${ENVIRONMENT}"
}

# Execute environment initialization
_env_init

# Display environment information
_env_info
