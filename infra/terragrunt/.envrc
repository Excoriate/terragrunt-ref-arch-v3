#!/usr/bin/env bash
# Terragrunt-specific Environment Configuration
# Inherits from root .envrc and provides Terragrunt-specific overrides and extensions

# Source parent .envrc for inheritance
source_up || true

# Terragrunt-specific logging function (extends root _log if needed)
_terragrunt_log() {
  local log_level="${1:-INFO}"
  local message="$2"
  _log "$log_level" "[TERRAGRUNT] $message"
}

# Enhanced .env file loading with comprehensive logging
_load_terragrunt_dotenv() {
  local current_dir="${1:-.}"
  local env_file="${current_dir}/.env"

  # Search for .env file in current directory and parent directories
  while [ "$current_dir" != "/" ]; do
    if [[ -f "${current_dir}/.env" ]]; then
      _terragrunt_log "INFO" "Found .env file at ${current_dir}/.env"

      # Use set -a to export all variables from .env
      set -a
      # shellcheck disable=SC1090
      source "${current_dir}/.env"
      set +a

      _terragrunt_log "INFO" "Loaded environment variables from ${current_dir}/.env"
      return 0
    fi

    current_dir=$(dirname "$current_dir")
  done

  _terragrunt_log "WARN" "No .env file found in current or parent directories"
  return 1
}

# Terragrunt-specific environment variable export
_terragrunt_export() {
  # Use the existing _safe_export from parent, but with Terragrunt-specific logging
  _safe_export "$1" "$2" "$(caller | awk '{print $2}')"
  _terragrunt_log "TRACK" "Terragrunt config: $1 = [REDACTED]"
}

# Terragrunt configuration detection
_detect_terragrunt_root() {
  local current_dir="$PWD"
  local terragrunt_markers=(
    "terragrunt.hcl"
    "root.hcl"
    "config.hcl"
  )

  while [ "$current_dir" != "/" ]; do
    for marker in "${terragrunt_markers[@]}"; do
      if [ -e "$current_dir/$marker" ]; then
        _terragrunt_export TERRAGRUNT_ROOT "$current_dir"
        _terragrunt_log "INFO" "Terragrunt root detected: $current_dir"
        return 0
      fi
    done
    current_dir=$(dirname "$current_dir")
  done

  _terragrunt_export TERRAGRUNT_ROOT "$PWD"
  _terragrunt_log "WARN" "No specific Terragrunt root marker found. Using current directory."
}

# Main Terragrunt initialization
_terragrunt_init() {
  # Detect Terragrunt root
  _detect_terragrunt_root

  # Load .env file from current or parent directories
  _load_terragrunt_dotenv

  # üîê TERRAGRUNT-SPECIFIC ENVIRONMENT VARIABLE DEFINITION SECTION üîê
  # Use _terragrunt_export to add Terragrunt-wide environment variables
  # Uncomment and modify as needed, following these guidelines:
  # 1. Use uppercase names
  # 2. Provide meaningful values
  # 3. Add comments explaining the variable's purpose

  # Example variables (uncomment and customize):
  # _terragrunt_export TERRAGRUNT_DEBUG "true"
  # _terragrunt_export MAX_TERRAGRUNT_PARALLEL_JOBS "5"
  # _terragrunt_export CUSTOM_TERRAGRUNT_OPTION "some_value"

  # Terragrunt cache and performance settings
  _terragrunt_export TERRAGRUNT_DOWNLOAD_DIR "${HOME}/.terragrunt-cache/$(basename "$PROJECT_ROOT")"
  _terragrunt_export TERRAGRUNT_CACHE_MAX_AGE "168h"  # 7 days

  # Terragrunt logging and output control
  _terragrunt_export TERRAGRUNT_LOG_LEVEL "info"
  _terragrunt_export TERRAGRUNT_DISABLE_CONSOLE_OUTPUT "false"

  # Terraform and Terragrunt version management
  _terragrunt_export TF_INPUT "0"  # Disable interactive input (can be overridden in specific environments)
  _terragrunt_export TERRAGRUNT_AUTO_INIT "true"
  _terragrunt_export TERRAGRUNT_AUTO_RETRY "true"

  # Optional: Environment-specific Terragrunt configurations
  # Uncomment and modify as needed
  # _terragrunt_export TERRAGRUNT_CONFIG "${TERRAGRUNT_ROOT}/config.hcl"
  # _terragrunt_export TERRAGRUNT_WORKING_DIR "${TERRAGRUNT_ROOT}"

  # Validation of critical Terragrunt configurations
  _validate_terragrunt_config
}

# Validate Terragrunt configuration
_validate_terragrunt_config() {
  local required_vars=(
    "TERRAGRUNT_ROOT"
    "TERRAGRUNT_DOWNLOAD_DIR"
  )
  local missing_vars=()

  for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
      missing_vars+=("$var")
    fi
  done

  if [[ ${#missing_vars[@]} -gt 0 ]]; then
    _terragrunt_log "ERROR" "Missing critical Terragrunt configurations:"
    printf '%s\n' "${missing_vars[@]}"
    return 1
  fi

  _terragrunt_log "INFO" "Terragrunt configuration validated successfully"
}

# Terragrunt environment information
_terragrunt_env_info() {
  _terragrunt_log "INFO" "üåç Terragrunt Environment Details"
  _terragrunt_log "INFO" "Terragrunt Root: ${TERRAGRUNT_ROOT}"
  _terragrunt_log "INFO" "Terragrunt Download Dir: ${TERRAGRUNT_DOWNLOAD_DIR}"
  _terragrunt_log "INFO" "Terragrunt Log Level: ${TERRAGRUNT_LOG_LEVEL}"
}

# Execute Terragrunt initialization
_terragrunt_init

# Display Terragrunt environment information
_terragrunt_env_info

# Execute main initialization
main
