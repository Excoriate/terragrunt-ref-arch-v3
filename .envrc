#!/usr/bin/env bash
# Root project environment configuration
# Comprehensive, secure, and developer-friendly environment setup

# Logging and tracing
_log() {
  local log_level="${1:-INFO}"
  local message="$2"
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo "[${log_level}] ${timestamp} - ${message}" >&2
}

# Secure environment variable export with validation and logging
_safe_export() {
  local var_name="$1"
  local var_value="$2"
  local source_file="${3:-$(caller | awk '{print $2}')}"

  # Validate variable name (must be uppercase and contain only alphanumeric characters and underscores)
  if [[ ! "$var_name" =~ ^[A-Z][A-Z0-9_]*$ ]]; then
    _log "ERROR" "Invalid environment variable name: $var_name. Must be uppercase and start with a letter."
    return 1
  fi

  # Check for empty or whitespace-only values
  if [[ -z "${var_value// }" ]]; then
    _log "WARN" "Attempted to export empty or whitespace-only value for '$var_name'"
    return 1
  fi

  # Sanitize the value (remove leading/trailing whitespace)
  var_value=$(echo "$var_value" | xargs)

  # Export with logging
  export "$var_name"="$var_value"
  _log "TRACK" "$var_name = [REDACTED] (from $source_file)"
}

# Enhanced .env file loading with comprehensive logging
_load_dotenv() {
  local current_dir="${1:-.}"
  local env_file="${current_dir}/.env"

  # Search for .env file in current directory and parent directories
  while [ "$current_dir" != "/" ]; do
    if [[ -f "${current_dir}/.env" ]]; then
      _log "INFO" "Found .env file at ${current_dir}/.env"

      # Use set -a to export all variables from .env
      set -a
      # shellcheck disable=SC1090
      source "${current_dir}/.env"
      set +a

      _log "INFO" "Loaded environment variables from ${current_dir}/.env"
      return 0
    fi

    current_dir=$(dirname "$current_dir")
  done

  _log "WARN" "No .env file found in current or parent directories"
  return 1
}

# Project root detection with enhanced markers and logging
_detect_project_root() {
  local current_dir="$PWD"
  local root_markers=(
    ".git"
    "flake.nix"
    "pyproject.toml"
    "infra/terragrunt/config.hcl"
    "justfile"
  )

  while [ "$current_dir" != "/" ]; do
    for marker in "${root_markers[@]}"; do
      if [ -e "$current_dir/$marker" ]; then
        _safe_export PROJECT_ROOT "$current_dir"
        _log "INFO" "Project root detected: $current_dir"
        return 0
      fi
    done
    current_dir=$(dirname "$current_dir")
  done

  _safe_export PROJECT_ROOT "$PWD"
  _log "WARN" "No specific project root marker found. Using current directory."
}

# Main initialization
main() {
  # Detect project root
  _detect_project_root

  # Load .env file from current or parent directories
  _load_dotenv

  # Global defaults and security settings
  _safe_export DEFAULT_REGION "us-east-1"
  _safe_export TF_INPUT "0"  # Disable interactive Terraform input
  _safe_export LANG "en_US.UTF-8"
  _safe_export LC_ALL "en_US.UTF-8"

  # Development experience enhancements
  _safe_export DIRENV_LOG_FORMAT "[direnv] %s"

  # üîê DIRECT ENVIRONMENT VARIABLE DEFINITION SECTION üîê
  # Use _safe_export to add project-wide environment variables
  # Uncomment and modify as needed, following these guidelines:
  # 1. Use uppercase names
  # 2. Provide meaningful values
  # 3. Add comments explaining the variable's purpose

  # Example variables (uncomment and customize):
  # _safe_export EXAMPLE_API_ENDPOINT "https://api.example.com/v1"
  # _safe_export MAX_CONCURRENT_JOBS "5"
  # _safe_export DEBUG_MODE "false"

  # Optional: Source up for inheritance (allows parent .envrc to be loaded)
  source_up || true

  _log "INFO" "Environment initialization complete"
}

# Execute main initialization
main
