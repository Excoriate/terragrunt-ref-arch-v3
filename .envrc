#!/usr/bin/env bash
# Root project environment configuration - Simplified version
# Provides all environment variables directly in .envrc without .env dependency

# Enable Nix flake support for direnv
use flake

# Simple logging function
_log() {
  local log_level="${1:-INFO}"
  local message="$2"
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo "[${log_level}] ${timestamp} - ${message}" >&2
}

# Secure environment variable export with validation
_safe_export() {
  local var_name="$1"
  local var_value="$2"

  # Validate variable name
  if [[ ! "$var_name" =~ ^[A-Z][A-Z0-9_]*$ ]]; then
    _log "ERROR" "Invalid environment variable name: $var_name. Must be uppercase and start with a letter."
    return 1
  fi

  # Check for empty values
  if [[ -z "${var_value// }" ]]; then
    _log "WARN" "Attempted to export empty or whitespace-only value for '$var_name'"
    return 1
  fi

  # Sanitize and export
  var_value=$(echo "$var_value" | xargs)
  export "$var_name"="$var_value"
  _log "TRACK" "$var_name = [REDACTED]"
}

# Project root detection
_detect_project_root() {
  local current_dir="$PWD"
  local root_markers=(".git" "flake.nix" "justfile")

  while [ "$current_dir" != "/" ]; do
    for marker in "${root_markers[@]}"; do
      if [ -e "$current_dir/$marker" ]; then
        _safe_export PROJECT_ROOT "$current_dir"
        _log "INFO" "Project root detected: $current_dir"
        return 0
      fi
    done
    current_dir=$(dirname "$current_dir")
  done

  _safe_export PROJECT_ROOT "$PWD"
  _log "WARN" "No specific project root marker found. Using current directory."
}

# Main initialization
main() {
  # Detect project root
  _detect_project_root

  # Global defaults and security settings
  _safe_export DEFAULT_REGION "us-east-1"
  _safe_export TF_INPUT "0"  # Disable interactive Terraform input
  _safe_export LANG "en_US.UTF-8"
  _safe_export LC_ALL "en_US.UTF-8"
  _safe_export DIRENV_LOG_FORMAT "[direnv] %s"

  # ---------------------------------------------------------------------
  # Application Observability Configuration
  # ---------------------------------------------------------------------
  _safe_export LOG_LEVEL "info                  "
  _safe_export LOG_DIR "/var/log/myapp          "

  # ---------------------------------------------------------------------
  # Terraform Remote State Management
  # ---------------------------------------------------------------------
  _safe_export TG_STACK_REMOTE_STATE_BUCKET_NAME "terraform-state-makemyinfra     "
  _safe_export TG_STACK_REMOTE_STATE_LOCK_TABLE "terraform-state-lock-makemyinfra "
  _safe_export TG_STACK_REMOTE_STATE_REGION "us-east-1                            "
  _safe_export TG_STACK_REMOTE_STATE_OBJECT_BASENAME "terraform.tfstate.json      "

  # ---------------------------------------------------------------------
  # Terragrunt Configuration Variables
  # ---------------------------------------------------------------------
  _safe_export TG_STACK_FLAG_ENABLE_PROVIDERS_OVERRIDE "true"
  _safe_export TG_STACK_FLAG_ENABLE_VERSIONS_OVERRIDE "true"
  _safe_export TG_STACK_REGION "us-east-1"
  _safe_export TG_STACK_TF_VERSION "1.9.0"
  _safe_export TG_STACK_FLAG_ENABLE_TERRAFORM_VERSION_FILE_OVERRIDE "false"

  # ---------------------------------------------------------------------
  # Application Metadata
  # ---------------------------------------------------------------------
  _safe_export TG_STACK_APP_AUTHOR "Excoriate"
  _safe_export TG_STACK_APP_PRODUCT_NAME "sample-app"

  # Optional: Source up for inheritance (allows parent .envrc to be loaded)
  source_up || true

  _log "INFO" "Environment initialization complete"
}

# Execute main initialization
main
